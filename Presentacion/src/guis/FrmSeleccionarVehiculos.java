/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package guis;

import entidades.AsignacionTraslado;
import entidades.Vehiculo;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import residuos_negocios.CtrlTraslados;

/**
 *
 * @author Equipo 2 - Residuos peligrosos
 */
public class FrmSeleccionarVehiculos extends javax.swing.JFrame {

    private final CtrlTraslados ctrlTraslados;
    private AsignacionTraslado asignacionTraslado;
    
    /**
     * Creates new form FrmSeleccionarVehiculos
     */
    public FrmSeleccionarVehiculos() {
        initComponents();
        this.ctrlTraslados = new CtrlTraslados();
    }
    
    public FrmSeleccionarVehiculos(AsignacionTraslado asignacionTraslado) {
        initComponents();
        this.ctrlTraslados = new CtrlTraslados();
        this.asignacionTraslado = asignacionTraslado;
        llenarTabla();
    }
    
    private void llenarTabla(){
        DefaultTableModel modeloTabla = (DefaultTableModel)this.tblVehiculosDisponibles.getModel();
        modeloTabla = ctrlTraslados.llenarTablaVehiculosDisponibles(modeloTabla);
    }
    
    private Vehiculo getVehiculoDisponibleSeleccionado(){
        int indiceFilaSeleccionada = this.tblVehiculosDisponibles.getSelectedRow();
        if(indiceFilaSeleccionada != -1){
            DefaultTableModel modelo = (DefaultTableModel)this.tblVehiculosDisponibles.getModel();
            int indiceColumnaVehiculoDisponible = 0;
            Vehiculo NombreVehiculoSeleccionado = (Vehiculo) modelo.getValueAt(indiceFilaSeleccionada, 
                indiceColumnaVehiculoDisponible);
            return NombreVehiculoSeleccionado;
        }else{
            return null;
        }
    }
    
    private Vehiculo getVehiculoElegidoSeleccionado(){
        int indiceFilaSeleccionada = this.tblVehiculosElegidos.getSelectedRow();
        if(indiceFilaSeleccionada != -1){
            DefaultTableModel modelo = (DefaultTableModel)this.tblVehiculosElegidos.getModel();
            int indiceColumnaVehiculo = 0;
            Vehiculo NombreVehiculoElegidoSeleccionado = (Vehiculo) modelo.getValueAt(indiceFilaSeleccionada, 
                indiceColumnaVehiculo);
            return NombreVehiculoElegidoSeleccionado;
        }else{
            return null;
        }
    }
    
    private int getIndiceVehiculoElegidoSeleccionado(){
        int indiceFilaSeleccionada = this.tblVehiculosElegidos.getSelectedRow();
        if(indiceFilaSeleccionada != -1){
            return indiceFilaSeleccionada;
        }else{
            return -1;
        }
    }
    
    private int getIndiceVehiculoDisponibleSeleccionado(){
        int indiceFilaSeleccionada = this.tblVehiculosDisponibles.getSelectedRow();
        if(indiceFilaSeleccionada != -1){
            return indiceFilaSeleccionada;
        }else{
            return -1;
        }
    }
    
    private void agregarTablaVehiculosElegidos()
    {
        DefaultTableModel modeloTablaVehiculosElegidos = (DefaultTableModel)this.tblVehiculosElegidos.getModel();
        DefaultTableModel modeloTablaVehiculosDisponibles = (DefaultTableModel)this.tblVehiculosDisponibles.getModel();
        Vehiculo vehiculoDisponibleSeleccionado = getVehiculoDisponibleSeleccionado();
        int idVehiculoDisponibleSeleccionado = getIndiceVehiculoDisponibleSeleccionado();
        modeloTablaVehiculosElegidos = ctrlTraslados.agregarTablaVehiculosElegidos(modeloTablaVehiculosElegidos, vehiculoDisponibleSeleccionado);
        modeloTablaVehiculosDisponibles = ctrlTraslados.removerTablaVehiculosDisponibles(modeloTablaVehiculosDisponibles, idVehiculoDisponibleSeleccionado);
    }
    
    private void removerTablaVehiculosElegidos()
    {
        DefaultTableModel modeloTablaComponentes = (DefaultTableModel)this.tblVehiculosElegidos.getModel();
        DefaultTableModel modeloTablaQuimicos = (DefaultTableModel)this.tblVehiculosDisponibles.getModel();
        Vehiculo VehiculoElegidoSeleccionado = getVehiculoElegidoSeleccionado();
        int indiceComponenteSeleccionado = getIndiceVehiculoElegidoSeleccionado();
        modeloTablaComponentes = ctrlTraslados.removerTablaVehiculosElegidos(modeloTablaComponentes, indiceComponenteSeleccionado);
        modeloTablaQuimicos = ctrlTraslados.agregarTablaVehiculosDisponibles(modeloTablaQuimicos, VehiculoElegidoSeleccionado);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblVehiculosElegidos = new javax.swing.JTable();
        btnRegistrar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblVehiculosDisponibles = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtKilometros = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtCostoTraslado = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        datePickerDestino = new com.github.lgooddatepicker.components.DatePicker();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txaTratamiento = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Vehículos");

        tblVehiculosElegidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vehiculos Elegidos"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblVehiculosElegidos);
        if (tblVehiculosElegidos.getColumnModel().getColumnCount() > 0) {
            tblVehiculosElegidos.getColumnModel().getColumn(0).setResizable(false);
        }

        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        tblVehiculosDisponibles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vehiculos disponibles"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblVehiculosDisponibles);
        if (tblVehiculosDisponibles.getColumnModel().getColumnCount() > 0) {
            tblVehiculosDisponibles.getColumnModel().getColumn(0).setResizable(false);
        }

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        jLabel1.setText("Kilómetros recorridos:");

        txtKilometros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKilometrosActionPerformed(evt);
            }
        });
        txtKilometros.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtKilometrosKeyTyped(evt);
            }
        });

        jLabel2.setText("Costo del traslado:");

        txtCostoTraslado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCostoTrasladoKeyTyped(evt);
            }
        });

        jLabel3.setText("Fecha de llegada al destino final:");

        jLabel4.setText("Tratamiento posterior:");

        txaTratamiento.setColumns(20);
        txaTratamiento.setRows(5);
        jScrollPane3.setViewportView(txaTratamiento);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(27, 27, 27)
                                    .addComponent(btnRegistrar))
                                .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jLabel1)))
                            .addGap(8, 8, 8)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnCancelar)
                                .addComponent(txtKilometros, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtCostoTraslado))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(datePickerDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnRemover, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                            .addComponent(btnAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(btnAgregar)
                        .addGap(42, 42, 42)
                        .addComponent(btnRemover))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtKilometros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtCostoTraslado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(datePickerDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRegistrar)
                            .addComponent(btnCancelar)))
                    .addComponent(jScrollPane3))
                .addGap(22, 22, 22))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // TODO add your handling code here:
        if(getVehiculoDisponibleSeleccionado()!= null)
        {
            agregarTablaVehiculosElegidos();
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Debes seleccionar un vehiculo disponible", 
                "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        // TODO add your handling code here:
        if(getIndiceVehiculoElegidoSeleccionado() != -1)
        {
            removerTablaVehiculosElegidos();
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Debes seleccionar un vehiculo elegido", 
                "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnRemoverActionPerformed

    private void txtKilometrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKilometrosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtKilometrosActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modeloTablaVehiculosElegidos = (DefaultTableModel)this.tblVehiculosElegidos.getModel();
        if(ctrlTraslados.verificarVehiculosElegidos(modeloTablaVehiculosElegidos))
        {
            if(!txtKilometros.getText().equals(""))
            {
                if(!txtCostoTraslado.getText().equals(""))
                {
                    if(!datePickerDestino.getDateStringOrEmptyString().equals(""))
                    {
                        String añoDestinoCadena = datePickerDestino.getDateStringOrEmptyString().substring(0, 4);
                        String mesDestinoCadena = datePickerDestino.getDateStringOrEmptyString().substring(5, 7);
                        String diaDestinoCadena = datePickerDestino.getDateStringOrEmptyString().substring(8, 10);
                        String fechaDestinoCadena = añoDestinoCadena+"-"+mesDestinoCadena+"-"+diaDestinoCadena;
                        if(!txaTratamiento.getText().equalsIgnoreCase(""))
                        {
                            if(Integer.parseInt(txtKilometros.getText()) > 0)
                            {
                                if(Integer.parseInt(txtKilometros.getText()) <= 1000)
                                {
                                    if(ctrlTraslados.agregarTraslado(asignacionTraslado, Integer.parseInt(txtKilometros.getText()), Float.parseFloat(txtCostoTraslado.getText()), fechaDestinoCadena, modeloTablaVehiculosElegidos))
                                    {
                                        JOptionPane.showMessageDialog(this, "El traslado se registro correctamente", 
                                            "Información", JOptionPane.INFORMATION_MESSAGE);
                                        new FrmPrincipal().setVisible(true);
                                        super.dispose();
                                    }
                                    else
                                    {
                                        JOptionPane.showMessageDialog(this, "No se pudo registrar el traslado", 
                                           "Advertencia", JOptionPane.WARNING_MESSAGE);
                                    }
                                }
                                else
                                {
                                    JOptionPane.showMessageDialog(this, "Los kilometros deben ser menor o igual que 1000", 
                                        "Advertencia", JOptionPane.WARNING_MESSAGE);
                                }
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(this, "Los kilometros deben ser mayor que 0", 
                                    "Advertencia", JOptionPane.WARNING_MESSAGE);
                            }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "Debe introducir un tratamiento posterior", 
                                "Advertencia", JOptionPane.WARNING_MESSAGE);
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this, "Debe introducir una fecha de llegada", 
                            "Advertencia", JOptionPane.WARNING_MESSAGE);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "Debe introducir un costo", 
                        "Advertencia", JOptionPane.WARNING_MESSAGE);
                }
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Debe introducir una distancia", 
                    "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Se agrego la solicitud exitosamente", 
                "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void txtKilometrosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtKilometrosKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(!Character.isDigit(c))
        {
            evt.consume();
        }
    }//GEN-LAST:event_txtKilometrosKeyTyped

    private void txtCostoTrasladoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCostoTrasladoKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(!Character.isDigit(c))
        {
            evt.consume();
        }
    }//GEN-LAST:event_txtCostoTrasladoKeyTyped

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        new FrmRegistrarResiduo().setVisible(true);
        super.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmSeleccionarVehiculos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmSeleccionarVehiculos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmSeleccionarVehiculos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmSeleccionarVehiculos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmSeleccionarVehiculos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JButton btnRemover;
    private com.github.lgooddatepicker.components.DatePicker datePickerDestino;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblVehiculosDisponibles;
    private javax.swing.JTable tblVehiculosElegidos;
    private javax.swing.JTextArea txaTratamiento;
    private javax.swing.JTextField txtCostoTraslado;
    private javax.swing.JTextField txtKilometros;
    // End of variables declaration//GEN-END:variables
}
